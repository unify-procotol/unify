{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "card-layout",
  "type": "registry:component",
  "title": "Custom Card Layout",
  "description": "Modern card layout inspired by daily.dev for displaying data in a grid format",
  "registryDependencies": [],
  "files": [
    {
      "path": "registry/default/card-layout/custom-layouts.tsx",
      "content": "import React from 'react';\n\n// Custom card layout renderer inspired by daily.dev\nexport const CardLayout = (data: any[], options: any) => {\n  const getAuthorInitials = (name: string) => {\n    if (!name) return \"??\";\n    return name.split(' ').map(word => word[0]).join('').toUpperCase().slice(0, 2);\n  };\n\n  const formatDate = (dateString: string) => {\n    if (!dateString) return \"Unknown\";\n    const date = new Date(dateString);\n    const now = new Date();\n    const diffTime = Math.abs(now.getTime() - date.getTime());\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    if (diffDays === 1) return \"Yesterday\";\n    if (diffDays <= 7) return `${diffDays}d ago`;\n    return date.toLocaleDateString('en-US', { \n      month: 'short', \n      day: 'numeric'\n    });\n  };\n\n  const getReadingTime = (content: string) => {\n    if (!content) return \"1m read time\";\n    const words = content.split(' ').length;\n    const minutes = Math.ceil(words / 200);\n    return `${minutes}m read time`;\n  };\n\n  const getTags = (record: any) => {\n    const tags: string[] = [];\n    if (record.type) tags.push(record.type);\n    if (record.category) tags.push(record.category);\n    if (record.status) tags.push(record.status);\n    if (record.role) tags.push(record.role);\n    if (tags.length === 0) {\n      tags.push('general');\n    }\n    return tags.slice(0, 3); // Limit to 3 tags like daily.dev\n  };\n\n  const getRandomLikes = () => Math.floor(Math.random() * 500) + 10;\n  const getRandomComments = () => Math.floor(Math.random() * 50) + 1;\n\n  return (\n    <div className=\"grid gap-4 grid-cols-2\">\n      {data.map((record, index) => {\n        const authorName = record.name || record.title || record.username || `Item ${index + 1}`;\n        const content = record.content || record.description || record.details || \"\";\n        const createdDate = record.createdAt || record.updatedAt || record.date || new Date().toISOString();\n        const tags = getTags(record);\n        const likes = getRandomLikes();\n        const comments = getRandomComments();\n        \n        return (\n          <div \n            key={record.id + Math.random() || index} \n            className=\"bg-white border border-gray-200 rounded-lg hover:shadow-lg transition-all duration-300 cursor-pointer\"\n          >\n            {/* Cover Image */}\n            <div className=\"aspect-[16/9] bg-gradient-to-br from-gray-100 to-gray-200 relative overflow-hidden rounded-t-lg\">\n              {record.imageUrl ? (\n                <img \n                  src={record.imageUrl} \n                  alt={authorName}\n                  className=\"absolute inset-0 w-full h-full object-cover\"\n                  onError={(e) => {\n                    // Fallback to placeholder if image fails to load\n                    e.currentTarget.style.display = 'none';\n                    e.currentTarget.nextElementSibling?.classList.remove('hidden');\n                  }}\n                />\n              ) : null}\n              <div className=\"absolute inset-0 flex items-center justify-center hidden\">\n                <div className=\"text-center\">\n                  <div className=\"w-16 h-16 bg-gray-300 rounded-lg flex items-center justify-center mb-2\">\n                    <svg className=\"w-8 h-8 text-gray-500\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M4 16l4.586-4.586a2 2 0 012.828 0L16 16m-2-2l1.586-1.586a2 2 0 012.828 0L20 14m-6-6h.01M6 20h12a2 2 0 002-2V6a2 2 0 00-2-2H6a2 2 0 00-2 2v12a2 2 0 002 2z\"/>\n                    </svg>\n                  </div>\n                  <div className=\"text-xs text-gray-500\">Image placeholder</div>\n                </div>\n              </div>\n              \n              {/* Tags overlay */}\n              <div className=\"absolute top-3 left-3 flex flex-wrap gap-1\">\n                {tags.map((tag, tagIndex) => (\n                  <span \n                    key={tagIndex} \n                    className=\"bg-black/70 text-white text-xs px-2 py-1 rounded backdrop-blur-sm\"\n                  >\n                    #{tag}\n                  </span>\n                ))}\n              </div>\n\n              {/* More options */}\n              <div className=\"absolute top-3 right-3\">\n                <button className=\"w-6 h-6 bg-black/70 text-white rounded-full flex items-center justify-center hover:bg-black/80 transition-colors\">\n                  <svg className=\"w-3 h-3\" fill=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path d=\"M12 8c1.1 0 2-.9 2-2s-.9-2-2-2-2 .9-2 2 .9 2 2 2zm0 2c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2zm0 6c-1.1 0-2 .9-2 2s.9 2 2 2 2-.9 2-2-.9-2-2-2z\"/>\n                  </svg>\n                </button>\n              </div>\n            </div>\n\n            {/* Card Content */}\n            <div className=\"p-4\">\n              {/* Author Info */}\n              <div className=\"flex items-center space-x-3 mb-3\">\n                <div className=\"w-8 h-8 rounded-full bg-gradient-to-br from-blue-500 to-purple-600 flex items-center justify-center\">\n                  <span className=\"text-xs font-semibold text-white\">\n                    {getAuthorInitials(authorName)}\n                  </span>\n                </div>\n                <div className=\"flex-1 min-w-0\">\n                  <div className=\"text-sm font-medium text-gray-900 truncate\">\n                    {record.email || 'Author'}\n                  </div>\n                  <div className=\"text-xs text-gray-500 flex items-center space-x-1\">\n                    <span>{formatDate(createdDate)}</span>\n                    <span>â€¢</span>\n                    <span>{getReadingTime(content)}</span>\n                  </div>\n                </div>\n              </div>\n\n              {/* Article Title */}\n              <h3 className=\"font-semibold text-lg text-gray-900 mb-2 leading-tight\" style={{ \n                display: '-webkit-box',\n                WebkitLineClamp: 2,\n                WebkitBoxOrient: 'vertical' as any,\n                overflow: 'hidden'\n              }}>\n                {authorName}\n              </h3>\n\n              {/* Content Preview */}\n              {content && (\n                <p className=\"text-sm text-gray-600 mb-4 leading-relaxed\" style={{ \n                  display: '-webkit-box',\n                  WebkitLineClamp: 2,\n                  WebkitBoxOrient: 'vertical' as any,\n                  overflow: 'hidden'\n                }}>\n                  {content}\n                </p>\n              )}\n\n              {/* Action Bar */}\n              <div className=\"flex items-center justify-between pt-3 border-t border-gray-100\">\n                <div className=\"flex items-center space-x-4\">\n                  {/* Upvote */}\n                  <button className=\"flex items-center space-x-1 text-gray-500 hover:text-blue-600 transition-colors\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M7 11l5-5m0 0l5 5m-5-5v12\"/>\n                    </svg>\n                    <span className=\"text-sm font-medium\">{likes}</span>\n                  </button>\n\n                  {/* Comments */}\n                  <button className=\"flex items-center space-x-1 text-gray-500 hover:text-green-600 transition-colors\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8 12h.01M12 12h.01M16 12h.01M21 12c0 4.418-4.03 8-9 8a9.863 9.863 0 01-4.255-.949L3 20l1.395-3.72C3.512 15.042 3 13.574 3 12c0-4.418 4.03-8 9-8s9 3.582 9 8z\"/>\n                    </svg>\n                    <span className=\"text-sm font-medium\">{comments}</span>\n                  </button>\n\n                  {/* Share */}\n                  <button className=\"flex items-center space-x-1 text-gray-500 hover:text-purple-600 transition-colors\">\n                    <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                      <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.367 2.684 3 3 0 00-5.367-2.684z\"/>\n                    </svg>\n                  </button>\n                </div>\n\n                {/* Bookmark */}\n                <button className=\"text-gray-500 hover:text-yellow-600 transition-colors\">\n                  <svg className=\"w-4 h-4\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\n                    <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth=\"2\" d=\"M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z\"/>\n                  </svg>\n                </button>\n              </div>\n            </div>\n          </div>\n        );\n      })}\n    </div>\n  );\n};",
      "type": "registry:component"
    }
  ]
}